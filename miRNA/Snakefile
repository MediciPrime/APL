SAMPLES = ['345', '346']

rule all:
    input:
        'end.log'

rule cutadapt:
    input:
        r1 = 'data/test/{sample}_R1.fastq.gz',
        r2 = 'data/test/{sample}_R2.fastq.gz'
    output:
        r1 = 'trimmed/test/{sample}_R1_trimmed.fq',
        r2 = 'trimmed/test/{sample}_R2_trimmed.fq'
    params:
        five_prime = 'GTTCAGAGTTCTACAGTCCGACGATC',
        three_prime = 'TGGAATTCTCGGGTGCCAAGG'
    shell:
        'cutadapt -a {params.five_prime} -A {params.three_prime} '
        '-q 30 -m 17 -M 26 -o {output.r1} -p {output.r2} '
        '{input.r1} {input.r2}'

rule bowtie2_build:
    input:
        'data/reference/hg19.fa'
    output:
        'data/reference/hg19.{num}.bt2'
    params:
        prefix = 'data/reference/hg19'
    shell:
        'bowtie2-build -q {input} {params.prefix}'

def get_bt2(wc):
    return expand('data/reference/hg19.{num}.bt2', num=[1,2,3,4])

# fix for bowtie paired end
def get_fastq(wc):
    return expand('trimmed/test/{sample}_{end}_trimmed.fq', sample=wc.sample,
                  end=['R1','R2'])
        
rule bowtie2:
    input:
        bowtie = get_bt2,
        r1 = 'trimmed/test/{sample}_R1_trimmed.fq',
        r2 = 'trimmed/test/{sample}_R2_trimmed.fq'
    output:
        aligned_sam = 'sam_files/test/{sample}_aligned.sam',
        unaligned_sam = 'sam_files/test/{sample}_unaligned.sam',
    params:
        index='data/reference/hg19'
    threads: 6
    shell:
        'bowtie2 -x {params.index} -D 20 -R 3 -N 1 -L 15 -i S,1,0.50 '
        '-1 {input.r1} -2 {input.r2} -p {threads} -S {output.aligned_sam} '
        '--un {output.unaligned_sam}'

rule samtools:
    input:
        aligned_sam = 'sam_files/test/{sample}_aligned.sam',
    output:
        aligned_bam = 'bam_files/test/{sample}_aligned.bam',
        sorted_bam = 'bam_files/test/{sample}_aligned_sorted.bam'
    threads: 6
    shell:
        'samtools view -bS -@ {threads} -o {output.aligned_bam} {input.aligned_sam} '
        '&& samtools sort -@ {threads} -o {output.sorted_bam} {output.aligned_bam} '
        '&& samtools index {output.sorted_bam}'
        
rule end:
    input:
        sorted_bam = expand('bam_files/test/{sample}_aligned_sorted.bam', sample=SAMPLES)
    output:
        'end.log'
    shell:
        "echo '{input.sorted_bam}' > {output}"
